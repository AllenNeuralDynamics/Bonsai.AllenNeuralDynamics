//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AllenNeuralDynamics.AindBehaviorServices.DataTypes
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum DataType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
        String = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="number")]
        Number = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="boolean")]
        Boolean = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="object")]
        Object = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="array")]
        Array = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="null")]
        Null = 5,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class RenderSynchState
    {
    
        private double? _syncQuadValue;
    
        private int? _frameIndex;
    
        private double? _frameTimestamp;
    
        public RenderSynchState()
        {
        }
    
        protected RenderSynchState(RenderSynchState other)
        {
            _syncQuadValue = other._syncQuadValue;
            _frameIndex = other._frameIndex;
            _frameTimestamp = other._frameTimestamp;
        }
    
        /// <summary>
        /// The synchronization quad value
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sync_quad_value")]
        [System.ComponentModel.DescriptionAttribute("The synchronization quad value")]
        public double? SyncQuadValue
        {
            get
            {
                return _syncQuadValue;
            }
            set
            {
                _syncQuadValue = value;
            }
        }
    
        /// <summary>
        /// The frame index of the event
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_index")]
        [System.ComponentModel.DescriptionAttribute("The frame index of the event")]
        public int? FrameIndex
        {
            get
            {
                return _frameIndex;
            }
            set
            {
                _frameIndex = value;
            }
        }
    
        /// <summary>
        /// The timestamp of the frame
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_timestamp")]
        [System.ComponentModel.DescriptionAttribute("The timestamp of the frame")]
        public double? FrameTimestamp
        {
            get
            {
                return _frameTimestamp;
            }
            set
            {
                _frameTimestamp = value;
            }
        }
    
        public System.IObservable<RenderSynchState> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RenderSynchState(this)));
        }
    
        public System.IObservable<RenderSynchState> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RenderSynchState(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("SyncQuadValue = " + _syncQuadValue + ", ");
            stringBuilder.Append("FrameIndex = " + _frameIndex + ", ");
            stringBuilder.Append("FrameTimestamp = " + _frameTimestamp);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A software event is a generic event that can be used to track any event that occurs in the software.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A software event is a generic event that can be used to track any event that occu" +
        "rs in the software.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class SoftwareEvent
    {
    
        private string _name;
    
        private double? _timestamp;
    
        private TimestampSource _timestampSource;
    
        private int? _frameIndex;
    
        private double? _frameTimestamp;
    
        private object _data;
    
        private DataType _dataType;
    
        private string _dataTypeHint;
    
        public SoftwareEvent()
        {
            _timestampSource = AllenNeuralDynamics.AindBehaviorServices.DataTypes.TimestampSource.Null;
            _dataType = AllenNeuralDynamics.AindBehaviorServices.DataTypes.DataType.Null;
        }
    
        protected SoftwareEvent(SoftwareEvent other)
        {
            _name = other._name;
            _timestamp = other._timestamp;
            _timestampSource = other._timestampSource;
            _frameIndex = other._frameIndex;
            _frameTimestamp = other._frameTimestamp;
            _data = other._data;
            _dataType = other._dataType;
            _dataTypeHint = other._dataTypeHint;
        }
    
        /// <summary>
        /// The name of the event
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The name of the event")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// The timestamp of the event
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
        [System.ComponentModel.DescriptionAttribute("The timestamp of the event")]
        public double? Timestamp
        {
            get
            {
                return _timestamp;
            }
            set
            {
                _timestamp = value;
            }
        }
    
        /// <summary>
        /// The source of the timestamp
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("timestamp_source")]
        [System.ComponentModel.DescriptionAttribute("The source of the timestamp")]
        public TimestampSource TimestampSource
        {
            get
            {
                return _timestampSource;
            }
            set
            {
                _timestampSource = value;
            }
        }
    
        /// <summary>
        /// The frame index of the event
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_index")]
        [System.ComponentModel.DescriptionAttribute("The frame index of the event")]
        public int? FrameIndex
        {
            get
            {
                return _frameIndex;
            }
            set
            {
                _frameIndex = value;
            }
        }
    
        /// <summary>
        /// The timestamp of the frame
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_timestamp")]
        [System.ComponentModel.DescriptionAttribute("The timestamp of the frame")]
        public double? FrameTimestamp
        {
            get
            {
                return _frameTimestamp;
            }
            set
            {
                _frameTimestamp = value;
            }
        }
    
        /// <summary>
        /// The data of the event
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("data")]
        [System.ComponentModel.DescriptionAttribute("The data of the event")]
        public object Data
        {
            get
            {
                return _data;
            }
            set
            {
                _data = value;
            }
        }
    
        /// <summary>
        /// The data type of the event
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dataType")]
        [System.ComponentModel.DescriptionAttribute("The data type of the event")]
        public DataType DataType
        {
            get
            {
                return _dataType;
            }
            set
            {
                _dataType = value;
            }
        }
    
        /// <summary>
        /// The data type hint of the event
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("data_type_hint")]
        [System.ComponentModel.DescriptionAttribute("The data type hint of the event")]
        public string DataTypeHint
        {
            get
            {
                return _dataTypeHint;
            }
            set
            {
                _dataTypeHint = value;
            }
        }
    
        public System.IObservable<SoftwareEvent> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SoftwareEvent(this)));
        }
    
        public System.IObservable<SoftwareEvent> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SoftwareEvent(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Name = " + _name + ", ");
            stringBuilder.Append("Timestamp = " + _timestamp + ", ");
            stringBuilder.Append("TimestampSource = " + _timestampSource + ", ");
            stringBuilder.Append("FrameIndex = " + _frameIndex + ", ");
            stringBuilder.Append("FrameTimestamp = " + _frameTimestamp + ", ");
            stringBuilder.Append("Data = " + _data + ", ");
            stringBuilder.Append("DataType = " + _dataType + ", ");
            stringBuilder.Append("DataTypeHint = " + _dataTypeHint);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum TimestampSource
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="null")]
        Null = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="harp")]
        Harp = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="render")]
        Render = 2,
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [Bonsai.CombinatorAttribute()]
    public partial class SerializeToJson
    {
    
        public Newtonsoft.Json.Formatting Formatting { get; set; }

        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            var formatting = Formatting;
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value, formatting));
        }

        public System.IObservable<string> Process(System.IObservable<RenderSynchState> source)
        {
            return Process<RenderSynchState>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SoftwareEvent> source)
        {
            return Process<SoftwareEvent>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RenderSynchState>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SoftwareEvent>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<RenderSynchState>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}