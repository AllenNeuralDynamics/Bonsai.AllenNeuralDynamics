//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace DataSchemaLocal
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum DataType
    {

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "string")]
        String = 0,

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "number")]
        Number = 1,

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "boolean")]
        Boolean = 2,

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "object")]
        Object = 3,

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "array")]
        Array = 4,

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "null")]
        Null = 5,
    }


    /// <summary>
    /// Log levels for the logging system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum LogLevel
    {

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "50")]
        Critical = 50,

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "40")]
        Error = 40,

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "30")]
        Warning = 30,

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "20")]
        Info = 20,

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "10")]
        Debug = 10,

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "0")]
        Notset = 0,
    }


    /// <summary>
    /// A payload for a log message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A payload for a log message.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LogPayload
    {

        private LogLevel _level = DataSchemaLocal.LogLevel.Debug;

        private object _message;

        private string _applicationVersion;

        public LogPayload()
        {
        }

        protected LogPayload(LogPayload other)
        {
            _level = other._level;
            _message = other._message;
            _applicationVersion = other._applicationVersion;
        }

        /// <summary>
        /// The level of the log message
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("level")]
        [System.ComponentModel.DescriptionAttribute("The level of the log message")]
        public LogLevel Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }

        /// <summary>
        /// The message of the log
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The message of the log")]
        public object Message
        {
            get
            {
                return _message;
            }
            set
            {
                _message = value;
            }
        }

        /// <summary>
        /// The version of the application
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("application_version")]
        [System.ComponentModel.DescriptionAttribute("The version of the application")]
        public string ApplicationVersion
        {
            get
            {
                return _applicationVersion;
            }
            set
            {
                _applicationVersion = value;
            }
        }

        public System.IObservable<LogPayload> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LogPayload(this)));
        }

        public System.IObservable<LogPayload> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LogPayload(this));
        }

        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("level = " + _level + ", ");
            stringBuilder.Append("message = " + _message + ", ");
            stringBuilder.Append("application_version = " + _applicationVersion);
            return true;
        }

        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A message is a generic message that can be used to track any message that occurs in the software.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A message is a generic message that can be used to track any message that occurs " +
        "in the software.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Message
    {

        private int _protocolVersion = 1;

        private System.DateTimeOffset _timestamp;

        private object _payload;

        private string _processId;

        private string _hostname;

        public Message()
        {
        }

        protected Message(Message other)
        {
            _protocolVersion = other._protocolVersion;
            _timestamp = other._timestamp;
            _payload = other._payload;
            _processId = other._processId;
            _hostname = other._hostname;
        }

        [Newtonsoft.Json.JsonPropertyAttribute("protocol_version")]
        public int ProtocolVersion
        {
            get
            {
                return _protocolVersion;
            }
            set
            {
                _protocolVersion = value;
            }
        }

        /// <summary>
        /// The timestamp of the message
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The timestamp of the message")]
        public System.DateTimeOffset Timestamp
        {
            get
            {
                return _timestamp;
            }
            set
            {
                _timestamp = value;
            }
        }

        /// <summary>
        /// The payload of the message
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The payload of the message")]
        public object Payload
        {
            get
            {
                return _payload;
            }
            set
            {
                _payload = value;
            }
        }

        /// <summary>
        /// Process that created the message
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("process_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Process that created the message")]
        public string ProcessId
        {
            get
            {
                return _processId;
            }
            set
            {
                _processId = value;
            }
        }

        /// <summary>
        /// Hostname that created the message
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("hostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Hostname that created the message")]
        public string Hostname
        {
            get
            {
                return _hostname;
            }
            set
            {
                _hostname = value;
            }
        }

        public System.IObservable<Message> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Message(this)));
        }

        public System.IObservable<Message> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Message(this));
        }

        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("protocol_version = " + _protocolVersion + ", ");
            stringBuilder.Append("timestamp = " + _timestamp + ", ");
            stringBuilder.Append("payload = " + _payload + ", ");
            stringBuilder.Append("process_id = " + _processId + ", ");
            stringBuilder.Append("hostname = " + _hostname);
            return true;
        }

        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class MessageLogPayload
    {

        private int _protocolVersion = 1;

        private System.DateTimeOffset _timestamp;

        private LogPayload _payload = new LogPayload();

        private string _processId;

        private string _hostname;

        public MessageLogPayload()
        {
        }

        protected MessageLogPayload(MessageLogPayload other)
        {
            _protocolVersion = other._protocolVersion;
            _timestamp = other._timestamp;
            _payload = other._payload;
            _processId = other._processId;
            _hostname = other._hostname;
        }

        [Newtonsoft.Json.JsonPropertyAttribute("protocol_version")]
        public int ProtocolVersion
        {
            get
            {
                return _protocolVersion;
            }
            set
            {
                _protocolVersion = value;
            }
        }

        /// <summary>
        /// The timestamp of the message
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The timestamp of the message")]
        public System.DateTimeOffset Timestamp
        {
            get
            {
                return _timestamp;
            }
            set
            {
                _timestamp = value;
            }
        }

        /// <summary>
        /// The payload of the message
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The payload of the message")]
        public LogPayload Payload
        {
            get
            {
                return _payload;
            }
            set
            {
                _payload = value;
            }
        }

        /// <summary>
        /// Process that created the message
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("process_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Process that created the message")]
        public string ProcessId
        {
            get
            {
                return _processId;
            }
            set
            {
                _processId = value;
            }
        }

        /// <summary>
        /// Hostname that created the message
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("hostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Hostname that created the message")]
        public string Hostname
        {
            get
            {
                return _hostname;
            }
            set
            {
                _hostname = value;
            }
        }

        public System.IObservable<MessageLogPayload> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new MessageLogPayload(this)));
        }

        public System.IObservable<MessageLogPayload> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new MessageLogPayload(this));
        }

        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("protocol_version = " + _protocolVersion + ", ");
            stringBuilder.Append("timestamp = " + _timestamp + ", ");
            stringBuilder.Append("payload = " + _payload + ", ");
            stringBuilder.Append("process_id = " + _processId + ", ");
            stringBuilder.Append("hostname = " + _hostname);
            return true;
        }

        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RenderSynchState
    {

        private double? _syncQuadValue;

        private int? _frameIndex;

        private double? _frameTimestamp;

        public RenderSynchState()
        {
        }

        protected RenderSynchState(RenderSynchState other)
        {
            _syncQuadValue = other._syncQuadValue;
            _frameIndex = other._frameIndex;
            _frameTimestamp = other._frameTimestamp;
        }

        /// <summary>
        /// The synchronization quad value
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sync_quad_value")]
        [System.ComponentModel.DescriptionAttribute("The synchronization quad value")]
        public double? SyncQuadValue
        {
            get
            {
                return _syncQuadValue;
            }
            set
            {
                _syncQuadValue = value;
            }
        }

        /// <summary>
        /// The frame index of the event
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_index")]
        [System.ComponentModel.DescriptionAttribute("The frame index of the event")]
        public int? FrameIndex
        {
            get
            {
                return _frameIndex;
            }
            set
            {
                _frameIndex = value;
            }
        }

        /// <summary>
        /// The timestamp of the frame
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_timestamp")]
        [System.ComponentModel.DescriptionAttribute("The timestamp of the frame")]
        public double? FrameTimestamp
        {
            get
            {
                return _frameTimestamp;
            }
            set
            {
                _frameTimestamp = value;
            }
        }

        public System.IObservable<RenderSynchState> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RenderSynchState(this)));
        }

        public System.IObservable<RenderSynchState> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RenderSynchState(this));
        }

        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("sync_quad_value = " + _syncQuadValue + ", ");
            stringBuilder.Append("frame_index = " + _frameIndex + ", ");
            stringBuilder.Append("frame_timestamp = " + _frameTimestamp);
            return true;
        }

        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A software event is a generic event that can be used to track any event that occurs in the software.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A software event is a generic event that can be used to track any event that occu" +
        "rs in the software.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SoftwareEvent
    {

        private string _name;

        private double? _timestamp;

        private TimestampSource _timestampSource = DataSchemaLocal.TimestampSource.Null;

        private int? _frameIndex;

        private double? _frameTimestamp;

        private object _data;

        private DataType _dataType = DataSchemaLocal.DataType.Null;

        private string _dataTypeHint;

        public SoftwareEvent()
        {
        }

        protected SoftwareEvent(SoftwareEvent other)
        {
            _name = other._name;
            _timestamp = other._timestamp;
            _timestampSource = other._timestampSource;
            _frameIndex = other._frameIndex;
            _frameTimestamp = other._frameTimestamp;
            _data = other._data;
            _dataType = other._dataType;
            _dataTypeHint = other._dataTypeHint;
        }

        /// <summary>
        /// The name of the event
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The name of the event")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        /// <summary>
        /// The timestamp of the event
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
        [System.ComponentModel.DescriptionAttribute("The timestamp of the event")]
        public double? Timestamp
        {
            get
            {
                return _timestamp;
            }
            set
            {
                _timestamp = value;
            }
        }

        /// <summary>
        /// The source of the timestamp
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("timestamp_source")]
        [System.ComponentModel.DescriptionAttribute("The source of the timestamp")]
        public TimestampSource TimestampSource
        {
            get
            {
                return _timestampSource;
            }
            set
            {
                _timestampSource = value;
            }
        }

        /// <summary>
        /// The frame index of the event
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_index")]
        [System.ComponentModel.DescriptionAttribute("The frame index of the event")]
        public int? FrameIndex
        {
            get
            {
                return _frameIndex;
            }
            set
            {
                _frameIndex = value;
            }
        }

        /// <summary>
        /// The timestamp of the frame
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_timestamp")]
        [System.ComponentModel.DescriptionAttribute("The timestamp of the frame")]
        public double? FrameTimestamp
        {
            get
            {
                return _frameTimestamp;
            }
            set
            {
                _frameTimestamp = value;
            }
        }

        /// <summary>
        /// The data of the event
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("data")]
        [System.ComponentModel.DescriptionAttribute("The data of the event")]
        public object Data
        {
            get
            {
                return _data;
            }
            set
            {
                _data = value;
            }
        }

        /// <summary>
        /// The data type of the event
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dataType")]
        [System.ComponentModel.DescriptionAttribute("The data type of the event")]
        public DataType DataType
        {
            get
            {
                return _dataType;
            }
            set
            {
                _dataType = value;
            }
        }

        /// <summary>
        /// The data type hint of the event
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("data_type_hint")]
        [System.ComponentModel.DescriptionAttribute("The data type hint of the event")]
        public string DataTypeHint
        {
            get
            {
                return _dataTypeHint;
            }
            set
            {
                _dataTypeHint = value;
            }
        }

        public System.IObservable<SoftwareEvent> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SoftwareEvent(this)));
        }

        public System.IObservable<SoftwareEvent> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SoftwareEvent(this));
        }

        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("timestamp = " + _timestamp + ", ");
            stringBuilder.Append("timestamp_source = " + _timestampSource + ", ");
            stringBuilder.Append("frame_index = " + _frameIndex + ", ");
            stringBuilder.Append("frame_timestamp = " + _frameTimestamp + ", ");
            stringBuilder.Append("data = " + _data + ", ");
            stringBuilder.Append("dataType = " + _dataType + ", ");
            stringBuilder.Append("data_type_hint = " + _dataTypeHint);
            return true;
        }

        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum TimestampSource
    {

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "null")]
        Null = 0,

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "harp")]
        Harp = 1,

        [System.Runtime.Serialization.EnumMemberAttribute(Value = "render")]
        Render = 2,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public abstract partial class DataTypes
    {

        private string _aindBehaviorServicesPkgVersion = "0.10.2";

        private string _version = "0.1.1";

        private SoftwareEvent _softwareEvent = new SoftwareEvent();

        private RenderSynchState _renderSynchState = new RenderSynchState();

        private MessageLogPayload _logMessage = new MessageLogPayload();

        private Message _message = new Message();

        protected DataTypes()
        {
        }

        protected DataTypes(DataTypes other)
        {
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _version = other._version;
            _softwareEvent = other._softwareEvent;
            _renderSynchState = other._renderSynchState;
            _logMessage = other._logMessage;
            _message = other._message;
        }

        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }

        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("software_event", Required = Newtonsoft.Json.Required.Always)]
        public SoftwareEvent SoftwareEvent
        {
            get
            {
                return _softwareEvent;
            }
            set
            {
                _softwareEvent = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("render_synch_state", Required = Newtonsoft.Json.Required.Always)]
        public RenderSynchState RenderSynchState
        {
            get
            {
                return _renderSynchState;
            }
            set
            {
                _renderSynchState = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("log_message", Required = Newtonsoft.Json.Required.Always)]
        public MessageLogPayload LogMessage
        {
            get
            {
                return _logMessage;
            }
            set
            {
                _logMessage = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("message", Required = Newtonsoft.Json.Required.Always)]
        public Message Message
        {
            get
            {
                return _message;
            }
            set
            {
                _message = value;
            }
        }

        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("aind_behavior_services_pkg_version = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("version = " + _version + ", ");
            stringBuilder.Append("software_event = " + _softwareEvent + ", ");
            stringBuilder.Append("render_synch_state = " + _renderSynchState + ", ");
            stringBuilder.Append("log_message = " + _logMessage + ", ");
            stringBuilder.Append("message = " + _message);
            return true;
        }

        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {

        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<LogPayload> source)
        {
            return Process<LogPayload>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Message> source)
        {
            return Process<Message>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MessageLogPayload> source)
        {
            return Process<MessageLogPayload>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RenderSynchState> source)
        {
            return Process<RenderSynchState>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SoftwareEvent> source)
        {
            return Process<SoftwareEvent>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DataTypes> source)
        {
            return Process<DataTypes>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogPayload>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Message>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MessageLogPayload>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RenderSynchState>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SoftwareEvent>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DataTypes>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {

        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<DataTypes>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}
