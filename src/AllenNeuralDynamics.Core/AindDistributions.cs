//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AllenNeuralDynamics.Core.Distrubutions
{
    #pragma warning disable // Disable all warnings

    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TruncationParameters
    {
    
        private bool _isTruncated = false;
    
        private double _min;
    
        private double _max;
    
        [Newtonsoft.Json.JsonPropertyAttribute("isTruncated")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="isTruncated")]
        public bool IsTruncated
        {
            get
            {
                return _isTruncated;
            }
            set
            {
                _isTruncated = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="min")]
        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="max")]
        public double Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    
        public System.IObservable<TruncationParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new TruncationParameters
                {
                    IsTruncated = _isTruncated,
                    Min = _min,
                    Max = _max
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ScalingParameters
    {
    
        private double _scale = 1D;
    
        private double _offset = 0D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scale")]
        public double Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("offset")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="offset")]
        public double Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        public System.IObservable<ScalingParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new ScalingParameters
                {
                    Scale = _scale,
                    Offset = _offset
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NormalDistribution
    {
    
        private string _family = "normal";
    
        private NormalParameters _normalParameters;
    
        [Newtonsoft.Json.JsonPropertyAttribute("family", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("normalParameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="normalParameters")]
        public NormalParameters NormalParameters
        {
            get
            {
                return _normalParameters;
            }
            set
            {
                _normalParameters = value;
            }
        }
    
        public System.IObservable<NormalDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new NormalDistribution
                {
                    Family = _family,
                    NormalParameters = _normalParameters
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LogNormalDistribution
    {
    
        private string _family = "logNormal";
    
        private LogNormalParameters _logNormalParameters;
    
        [Newtonsoft.Json.JsonPropertyAttribute("family", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("logNormalParameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="logNormalParameters")]
        public LogNormalParameters LogNormalParameters
        {
            get
            {
                return _logNormalParameters;
            }
            set
            {
                _logNormalParameters = value;
            }
        }
    
        public System.IObservable<LogNormalDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new LogNormalDistribution
                {
                    Family = _family,
                    LogNormalParameters = _logNormalParameters
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class UniformDistribution
    {
    
        private string _family = "uniform";
    
        private UniformParameters _uniformParameters;
    
        [Newtonsoft.Json.JsonPropertyAttribute("family", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("uniformParameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="uniformParameters")]
        public UniformParameters UniformParameters
        {
            get
            {
                return _uniformParameters;
            }
            set
            {
                _uniformParameters = value;
            }
        }
    
        public System.IObservable<UniformDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new UniformDistribution
                {
                    Family = _family,
                    UniformParameters = _uniformParameters
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ExponentialDistribution
    {
    
        private string _family = "exponential";
    
        private ExponentialParameters _exponentialParameters;
    
        [Newtonsoft.Json.JsonPropertyAttribute("family", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exponentialParameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exponentialParameters")]
        public ExponentialParameters ExponentialParameters
        {
            get
            {
                return _exponentialParameters;
            }
            set
            {
                _exponentialParameters = value;
            }
        }
    
        public System.IObservable<ExponentialDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new ExponentialDistribution
                {
                    Family = _family,
                    ExponentialParameters = _exponentialParameters
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class GammaDistribution
    {
    
        private string _family = "gamma";
    
        private GammaParameters _gammaParameters;
    
        [Newtonsoft.Json.JsonPropertyAttribute("family", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gammaParameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gammaParameters")]
        public GammaParameters GammaParameters
        {
            get
            {
                return _gammaParameters;
            }
            set
            {
                _gammaParameters = value;
            }
        }
    
        public System.IObservable<GammaDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new GammaDistribution
                {
                    Family = _family,
                    GammaParameters = _gammaParameters
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BinomialDistribution
    {
    
        private string _family = "binomial";
    
        private BinomialParameters _binomialParameters;
    
        [Newtonsoft.Json.JsonPropertyAttribute("family", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("binomialParameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="binomialParameters")]
        public BinomialParameters BinomialParameters
        {
            get
            {
                return _binomialParameters;
            }
            set
            {
                _binomialParameters = value;
            }
        }
    
        public System.IObservable<BinomialDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new BinomialDistribution
                {
                    Family = _family,
                    BinomialParameters = _binomialParameters
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BetaDistribution
    {
    
        private string _family = "beta";
    
        private BetaParameters _betaParameters;
    
        [Newtonsoft.Json.JsonPropertyAttribute("family", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("betaParameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="betaParameters")]
        public BetaParameters BetaParameters
        {
            get
            {
                return _betaParameters;
            }
            set
            {
                _betaParameters = value;
            }
        }
    
        public System.IObservable<BetaDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new BetaDistribution
                {
                    Family = _family,
                    BetaParameters = _betaParameters
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PoissonDistribution
    {
    
        private string _family = "poisson";
    
        private PoissonParameters _poissonParameters;
    
        [Newtonsoft.Json.JsonPropertyAttribute("family", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("poissonParameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="poissonParameters")]
        public PoissonParameters PoissonParameters
        {
            get
            {
                return _poissonParameters;
            }
            set
            {
                _poissonParameters = value;
            }
        }
    
        public System.IObservable<PoissonDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PoissonDistribution
                {
                    Family = _family,
                    PoissonParameters = _poissonParameters
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindDistributions
    {
    
        private string _version = "0.1.0";
    
        private System.Collections.Generic.List<NormalDistribution> _distributions = new System.Collections.Generic.List<NormalDistribution>();
    
        [Newtonsoft.Json.JsonPropertyAttribute("Version")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distributions")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distributions")]
        public System.Collections.Generic.List<NormalDistribution> Distributions
        {
            get
            {
                return _distributions;
            }
            set
            {
                _distributions = value;
            }
        }
    
        public System.IObservable<AindDistributions> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new AindDistributions
                {
                    Version = _version,
                    Distributions = _distributions
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NormalParameters
    {
    
        private double _mean = 0D;
    
        private double _std = 1D;
    
        private TruncationParameters _truncate;
    
        private ScalingParameters _scale;
    
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="mean")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("std")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="std")]
        public double Std
        {
            get
            {
                return _std;
            }
            set
            {
                _std = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncate")]
        public TruncationParameters Truncate
        {
            get
            {
                return _truncate;
            }
            set
            {
                _truncate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scale")]
        public ScalingParameters Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        public System.IObservable<NormalParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new NormalParameters
                {
                    Mean = _mean,
                    Std = _std,
                    Truncate = _truncate,
                    Scale = _scale
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LogNormalParameters
    {
    
        private double _mean = 0D;
    
        private double _std = 1D;
    
        private TruncationParameters _truncate;
    
        private ScalingParameters _scale;
    
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="mean")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("std")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="std")]
        public double Std
        {
            get
            {
                return _std;
            }
            set
            {
                _std = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncate")]
        public TruncationParameters Truncate
        {
            get
            {
                return _truncate;
            }
            set
            {
                _truncate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scale")]
        public ScalingParameters Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        public System.IObservable<LogNormalParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new LogNormalParameters
                {
                    Mean = _mean,
                    Std = _std,
                    Truncate = _truncate,
                    Scale = _scale
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class UniformParameters
    {
    
        private double _min = 0D;
    
        private double _max = 1D;
    
        private TruncationParameters _truncate;
    
        private ScalingParameters _scale;
    
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="min")]
        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="max")]
        public double Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncate")]
        public TruncationParameters Truncate
        {
            get
            {
                return _truncate;
            }
            set
            {
                _truncate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scale")]
        public ScalingParameters Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        public System.IObservable<UniformParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new UniformParameters
                {
                    Min = _min,
                    Max = _max,
                    Truncate = _truncate,
                    Scale = _scale
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ExponentialParameters
    {
    
        private double _rate = 1D;
    
        private TruncationParameters _truncate;
    
        private ScalingParameters _scale;
    
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rate")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncate")]
        public TruncationParameters Truncate
        {
            get
            {
                return _truncate;
            }
            set
            {
                _truncate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scale")]
        public ScalingParameters Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        public System.IObservable<ExponentialParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new ExponentialParameters
                {
                    Rate = _rate,
                    Truncate = _truncate,
                    Scale = _scale
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class GammaParameters
    {
    
        private double _shape = 1D;
    
        private double _rate = 1D;
    
        private TruncationParameters _truncate;
    
        private ScalingParameters _scale;
    
        [Newtonsoft.Json.JsonPropertyAttribute("shape")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="shape")]
        public double Shape
        {
            get
            {
                return _shape;
            }
            set
            {
                _shape = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rate")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncate")]
        public TruncationParameters Truncate
        {
            get
            {
                return _truncate;
            }
            set
            {
                _truncate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scale")]
        public ScalingParameters Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        public System.IObservable<GammaParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new GammaParameters
                {
                    Shape = _shape,
                    Rate = _rate,
                    Truncate = _truncate,
                    Scale = _scale
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BinomialParameters
    {
    
        private double _successProbability = 0.5D;
    
        private double _count = 1D;
    
        private TruncationParameters _truncate;
    
        private ScalingParameters _scale;
    
        [Newtonsoft.Json.JsonPropertyAttribute("successProbability")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="successProbability")]
        public double SuccessProbability
        {
            get
            {
                return _successProbability;
            }
            set
            {
                _successProbability = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("count")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="count")]
        public double Count
        {
            get
            {
                return _count;
            }
            set
            {
                _count = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncate")]
        public TruncationParameters Truncate
        {
            get
            {
                return _truncate;
            }
            set
            {
                _truncate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scale")]
        public ScalingParameters Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        public System.IObservable<BinomialParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new BinomialParameters
                {
                    SuccessProbability = _successProbability,
                    Count = _count,
                    Truncate = _truncate,
                    Scale = _scale
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BetaParameters
    {
    
        private double _alpha = 5D;
    
        private double _beta = 5D;
    
        private TruncationParameters _truncate;
    
        private ScalingParameters _scale;
    
        [Newtonsoft.Json.JsonPropertyAttribute("alpha")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="alpha")]
        public double Alpha
        {
            get
            {
                return _alpha;
            }
            set
            {
                _alpha = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("beta")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="beta")]
        public double Beta
        {
            get
            {
                return _beta;
            }
            set
            {
                _beta = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncate")]
        public TruncationParameters Truncate
        {
            get
            {
                return _truncate;
            }
            set
            {
                _truncate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scale")]
        public ScalingParameters Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        public System.IObservable<BetaParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new BetaParameters
                {
                    Alpha = _alpha,
                    Beta = _beta,
                    Truncate = _truncate,
                    Scale = _scale
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PoissonParameters
    {
    
        private double _rate = 1D;
    
        private TruncationParameters _truncate;
    
        private ScalingParameters _scale;
    
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rate")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncate")]
        public TruncationParameters Truncate
        {
            get
            {
                return _truncate;
            }
            set
            {
                _truncate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scale")]
        public ScalingParameters Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        public System.IObservable<PoissonParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PoissonParameters
                {
                    Rate = _rate,
                    Truncate = _truncate,
                    Scale = _scale
                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<TruncationParameters> source)
        {
            return Process<TruncationParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalingParameters> source)
        {
            return Process<ScalingParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistribution> source)
        {
            return Process<NormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistribution> source)
        {
            return Process<LogNormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistribution> source)
        {
            return Process<UniformDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistribution> source)
        {
            return Process<ExponentialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistribution> source)
        {
            return Process<GammaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistribution> source)
        {
            return Process<BinomialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistribution> source)
        {
            return Process<BetaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistribution> source)
        {
            return Process<PoissonDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindDistributions> source)
        {
            return Process<AindDistributions>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalParameters> source)
        {
            return Process<NormalParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalParameters> source)
        {
            return Process<LogNormalParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformParameters> source)
        {
            return Process<UniformParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialParameters> source)
        {
            return Process<ExponentialParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaParameters> source)
        {
            return Process<GammaParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialParameters> source)
        {
            return Process<BinomialParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaParameters> source)
        {
            return Process<BetaParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonParameters> source)
        {
            return Process<PoissonParameters>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncationParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalingParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindDistributions>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonParameters>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindDistributions>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<TruncationParameters> source)
        {
            return Process<TruncationParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalingParameters> source)
        {
            return Process<ScalingParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistribution> source)
        {
            return Process<NormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistribution> source)
        {
            return Process<LogNormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistribution> source)
        {
            return Process<UniformDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistribution> source)
        {
            return Process<ExponentialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistribution> source)
        {
            return Process<GammaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistribution> source)
        {
            return Process<BinomialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistribution> source)
        {
            return Process<BetaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistribution> source)
        {
            return Process<PoissonDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindDistributions> source)
        {
            return Process<AindDistributions>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalParameters> source)
        {
            return Process<NormalParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalParameters> source)
        {
            return Process<LogNormalParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformParameters> source)
        {
            return Process<UniformParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialParameters> source)
        {
            return Process<ExponentialParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaParameters> source)
        {
            return Process<GammaParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialParameters> source)
        {
            return Process<BinomialParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaParameters> source)
        {
            return Process<BetaParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonParameters> source)
        {
            return Process<PoissonParameters>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncationParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalingParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindDistributions>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonParameters>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindDistributions>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}